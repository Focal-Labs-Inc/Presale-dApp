/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FocalPointInterface extends utils.Interface {
  contractName: "FocalPoint";
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyFee()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "enableFees(bool)": FunctionFragment;
    "enableTrading()": FunctionFragment;
    "feelessAddresses(address)": FunctionFragment;
    "feesEnabled()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "liquidityFee()": FunctionFragment;
    "marketingFee()": FunctionFragment;
    "maxTxAmount()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "platformFee()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "routerAddress()": FunctionFragment;
    "sellFee()": FunctionFragment;
    "setBuyFees(uint256,uint256,uint256)": FunctionFragment;
    "setFeeAddresses(address,address,address)": FunctionFragment;
    "setFeeless(address,bool)": FunctionFragment;
    "setMaxTransaction(uint256)": FunctionFragment;
    "setMinSwapTokens(uint256)": FunctionFragment;
    "setSellFees(uint256,uint256,uint256)": FunctionFragment;
    "setSwapAndLiquifyEnabled(bool)": FunctionFragment;
    "swapAndLiquifyEnabled()": FunctionFragment;
    "swapPairAddress()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingEnabled()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "buyFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "enableFees", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feelessAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "feesEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sellFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBuyFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAddresses",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeless",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinSwapTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAndLiquifyEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapPairAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enableFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feelessAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBuyFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeless", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinSwapTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddFeeExemption(address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveFeeExemption(address)": EventFragment;
    "SwapAndDistribute(uint256,uint256)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "SwapAndLiquifyUpdated(bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateLiquidityInfo(uint256,uint256,address)": EventFragment;
    "UpdateMarketingInfo(uint256,uint256,address)": EventFragment;
    "UpdatePlatformInfo(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddFeeExemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveFeeExemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndDistribute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquifyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLiquidityInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMarketingInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePlatformInfo"): EventFragment;
}

export type AddFeeExemptionEvent = TypedEvent<[string], { addy: string }>;

export type AddFeeExemptionEventFilter = TypedEventFilter<AddFeeExemptionEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RemoveFeeExemptionEvent = TypedEvent<[string], { addy: string }>;

export type RemoveFeeExemptionEventFilter =
  TypedEventFilter<RemoveFeeExemptionEvent>;

export type SwapAndDistributeEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tokensSwapped: BigNumber; ethReceived: BigNumber }
>;

export type SwapAndDistributeEventFilter =
  TypedEventFilter<SwapAndDistributeEvent>;

export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    tokensSwapped: BigNumber;
    ethReceived: BigNumber;
    tokensIntoLiquidity: BigNumber;
  }
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export type SwapAndLiquifyUpdatedEvent = TypedEvent<
  [boolean],
  { _enabled: boolean }
>;

export type SwapAndLiquifyUpdatedEventFilter =
  TypedEventFilter<SwapAndLiquifyUpdatedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UpdateLiquidityInfoEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { buyFee: BigNumber; sellFee: BigNumber; beneficiary: string }
>;

export type UpdateLiquidityInfoEventFilter =
  TypedEventFilter<UpdateLiquidityInfoEvent>;

export type UpdateMarketingInfoEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { buyFee: BigNumber; sellFee: BigNumber; beneficiary: string }
>;

export type UpdateMarketingInfoEventFilter =
  TypedEventFilter<UpdateMarketingInfoEvent>;

export type UpdatePlatformInfoEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { buyFee: BigNumber; sellFee: BigNumber; beneficiary: string }
>;

export type UpdatePlatformInfoEventFilter =
  TypedEventFilter<UpdatePlatformInfoEvent>;

export interface FocalPoint extends BaseContract {
  contractName: "FocalPoint";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FocalPointInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableFees(
      v: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feelessAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    feesEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber] & {
        buyFee: BigNumber;
        sellFee: BigNumber;
        beneficiary: string;
        tokensCollected: BigNumber;
      }
    >;

    marketingFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber] & {
        buyFee: BigNumber;
        sellFee: BigNumber;
        beneficiary: string;
        tokensCollected: BigNumber;
      }
    >;

    maxTxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    platformFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber] & {
        buyFee: BigNumber;
        sellFee: BigNumber;
        beneficiary: string;
        tokensCollected: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    routerAddress(overrides?: CallOverrides): Promise<[string]>;

    sellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBuyFees(
      platformBuyFee: BigNumberish,
      marketingBuyFee: BigNumberish,
      liquidityBuyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAddresses(
      platformAddress: string,
      marketingAddress: string,
      liquidityAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeless(
      addy: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTransaction(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinSwapTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSellFees(
      platformSellFee: BigNumberish,
      marketingSellFee: BigNumberish,
      liquiditySellFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapAndLiquifyEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    swapPairAddress(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyFee(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableFees(
    v: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableTrading(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feelessAddresses(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  feesEnabled(overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityFee(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber] & {
      buyFee: BigNumber;
      sellFee: BigNumber;
      beneficiary: string;
      tokensCollected: BigNumber;
    }
  >;

  marketingFee(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber] & {
      buyFee: BigNumber;
      sellFee: BigNumber;
      beneficiary: string;
      tokensCollected: BigNumber;
    }
  >;

  maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  platformFee(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber] & {
      buyFee: BigNumber;
      sellFee: BigNumber;
      beneficiary: string;
      tokensCollected: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  routerAddress(overrides?: CallOverrides): Promise<string>;

  sellFee(overrides?: CallOverrides): Promise<BigNumber>;

  setBuyFees(
    platformBuyFee: BigNumberish,
    marketingBuyFee: BigNumberish,
    liquidityBuyFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAddresses(
    platformAddress: string,
    marketingAddress: string,
    liquidityAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeless(
    addy: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTransaction(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinSwapTokens(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSellFees(
    platformSellFee: BigNumberish,
    marketingSellFee: BigNumberish,
    liquiditySellFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapAndLiquifyEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

  swapPairAddress(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingEnabled(overrides?: CallOverrides): Promise<boolean>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyFee(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableFees(v: boolean, overrides?: CallOverrides): Promise<void>;

    enableTrading(overrides?: CallOverrides): Promise<void>;

    feelessAddresses(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    feesEnabled(overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidityFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber] & {
        buyFee: BigNumber;
        sellFee: BigNumber;
        beneficiary: string;
        tokensCollected: BigNumber;
      }
    >;

    marketingFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber] & {
        buyFee: BigNumber;
        sellFee: BigNumber;
        beneficiary: string;
        tokensCollected: BigNumber;
      }
    >;

    maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    platformFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber] & {
        buyFee: BigNumber;
        sellFee: BigNumber;
        beneficiary: string;
        tokensCollected: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    routerAddress(overrides?: CallOverrides): Promise<string>;

    sellFee(overrides?: CallOverrides): Promise<BigNumber>;

    setBuyFees(
      platformBuyFee: BigNumberish,
      marketingBuyFee: BigNumberish,
      liquidityBuyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeAddresses(
      platformAddress: string,
      marketingAddress: string,
      liquidityAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeless(
      addy: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTransaction(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinSwapTokens(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellFees(
      platformSellFee: BigNumberish,
      marketingSellFee: BigNumberish,
      liquiditySellFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapAndLiquifyEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

    swapPairAddress(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingEnabled(overrides?: CallOverrides): Promise<boolean>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddFeeExemption(address)"(addy?: null): AddFeeExemptionEventFilter;
    AddFeeExemption(addy?: null): AddFeeExemptionEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RemoveFeeExemption(address)"(addy?: null): RemoveFeeExemptionEventFilter;
    RemoveFeeExemption(addy?: null): RemoveFeeExemptionEventFilter;

    "SwapAndDistribute(uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null
    ): SwapAndDistributeEventFilter;
    SwapAndDistribute(
      tokensSwapped?: null,
      ethReceived?: null
    ): SwapAndDistributeEventFilter;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): SwapAndLiquifyEventFilter;

    "SwapAndLiquifyUpdated(bool)"(
      _enabled?: null
    ): SwapAndLiquifyUpdatedEventFilter;
    SwapAndLiquifyUpdated(_enabled?: null): SwapAndLiquifyUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UpdateLiquidityInfo(uint256,uint256,address)"(
      buyFee?: null,
      sellFee?: null,
      beneficiary?: null
    ): UpdateLiquidityInfoEventFilter;
    UpdateLiquidityInfo(
      buyFee?: null,
      sellFee?: null,
      beneficiary?: null
    ): UpdateLiquidityInfoEventFilter;

    "UpdateMarketingInfo(uint256,uint256,address)"(
      buyFee?: null,
      sellFee?: null,
      beneficiary?: null
    ): UpdateMarketingInfoEventFilter;
    UpdateMarketingInfo(
      buyFee?: null,
      sellFee?: null,
      beneficiary?: null
    ): UpdateMarketingInfoEventFilter;

    "UpdatePlatformInfo(uint256,uint256,address)"(
      buyFee?: null,
      sellFee?: null,
      beneficiary?: null
    ): UpdatePlatformInfoEventFilter;
    UpdatePlatformInfo(
      buyFee?: null,
      sellFee?: null,
      beneficiary?: null
    ): UpdatePlatformInfoEventFilter;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyFee(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableFees(
      v: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feelessAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feesEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    marketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    routerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    sellFee(overrides?: CallOverrides): Promise<BigNumber>;

    setBuyFees(
      platformBuyFee: BigNumberish,
      marketingBuyFee: BigNumberish,
      liquidityBuyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAddresses(
      platformAddress: string,
      marketingAddress: string,
      liquidityAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeless(
      addy: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTransaction(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinSwapTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSellFees(
      platformSellFee: BigNumberish,
      marketingSellFee: BigNumberish,
      liquiditySellFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapAndLiquifyEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    swapPairAddress(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableFees(
      v: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feelessAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feesEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    routerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBuyFees(
      platformBuyFee: BigNumberish,
      marketingBuyFee: BigNumberish,
      liquidityBuyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAddresses(
      platformAddress: string,
      marketingAddress: string,
      liquidityAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeless(
      addy: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTransaction(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinSwapTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSellFees(
      platformSellFee: BigNumberish,
      marketingSellFee: BigNumberish,
      liquiditySellFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapAndLiquifyEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAndLiquifyEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapPairAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
